<?php

/*
 * Implement hook_theme().
 */
function dkan_dash_theme(){
  return array(
    'dkan_dash' => array(
      'template' => 'dkan-dash',
      'path' => drupal_get_path('module', 'dkan_dash') . '/templates',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dkan_dash_menu() {
  $items['dashboard/%node'] = array(
    'title' => '',
    'page arguments' => array(1),
    'page callback' => 'dkan_dash_page',
    'access arguments' => array('access content'),
  );

  $items['dashboard/%node/autocomplete'] = array(
    'title' => 'Dashboard Autocomplete',
    'page arguments' => array(1),
    'page callback' => 'dkan_dash_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function visualization_entity_charts_libraries_info() {
  $libraries = array();
  $libraries['react-dash'] = array(
    'name' => 'React Dash',
    'vendor url' => 'https://github.com/NuCivic/react-dash',
    'download url' => 'https://github.com/NuCivic/react-dash/archive/master.zip',
    'version arguments' => array(
      'file' => 'package.json',
      'pattern' => '/"version": "(\d+\.\d+\.\d+)"/',
    ),
    'files' => array(
      'js' => array(
        'dist/bundle.min.js',
      ),
      'css' => array(
        'dist/bundle.min.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Returns the dashboard page
 */
function dkan_dash_page($node) {
  libraries_load('react-dash');
  drupal_add_js(array('dkan_dash' => array('currentNid' => $node->nid)), 'setting');
  return theme('dkan_dash');
}


/**
 * Just a placeholder function showing how to create and enpoind
 * ready to be consumed by the react autocomplete component
 * included inside the react dashboard library.
 * In short you need to retrieve an array with the selection
 * where each selection is an object with the label and value
 * property inside.
 *
 * e.g. [ {label: 'One', value: 'one'}, {label: 'Two', value: 'two'}]
 */
function dkan_dash_autocomplete($node, $field, $value) {
  $options = array();
  if(empty($node) || empty($field)) return drupal_json_output($options);
  $datastore = dkan_datastore_go($node->uuid);
  $table = $datastore->tableName;
  $limit = array(0, 100);
  try {
    $query = db_select($table , 'r')
      ->fields('r')
      ->groupBy($field);
    if(!empty($value)) {
      $query->condition($field, '%'. $value . '%', 'LIKE');
    }
    $result = $query
      ->range($limit[0], $limit[1])
      ->execute();

    while ($row = $result->fetchAssoc()) {
      $options[] = array('label' => $row[$field], 'value' => $row[$field]);
    }
  } catch(Exception $e) {
    return drupal_json_output(array('error' => $e->getMessage()));
  }

  return drupal_json_output($options);
}